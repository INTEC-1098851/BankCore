//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BanCore
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CoreDbEntities : DbContext
    {
        public CoreDbEntities()
            : base("name=CoreDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<getaccounts_Result> getaccounts(Nullable<int> accountId, string accountNumber, Nullable<int> clientId, Nullable<int> currencyTypeId)
        {
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var currencyTypeIdParameter = currencyTypeId.HasValue ?
                new ObjectParameter("CurrencyTypeId", currencyTypeId) :
                new ObjectParameter("CurrencyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getaccounts_Result>("getaccounts", accountIdParameter, accountNumberParameter, clientIdParameter, currencyTypeIdParameter);
        }
    
        public virtual ObjectResult<getbanks_Result> getbanks(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getbanks_Result>("getbanks", idParameter, nameParameter);
        }
    
        public virtual ObjectResult<getcards_Result> getcards(Nullable<int> id, Nullable<int> clientId, string cardNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getcards_Result>("getcards", idParameter, clientIdParameter, cardNumberParameter);
        }
    
        public virtual ObjectResult<getclients_Result> getclients(Nullable<int> id, string identification)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var identificationParameter = identification != null ?
                new ObjectParameter("Identification", identification) :
                new ObjectParameter("Identification", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getclients_Result>("getclients", idParameter, identificationParameter);
        }
    
        public virtual ObjectResult<gettransactions_Result> gettransactions(Nullable<int> id, Nullable<int> payerId, string payerAccount, string payerIdentification, Nullable<int> payeeId, string payeeAccount, string payeeIdentification, string transactionNumber, string referenceNumber, Nullable<System.DateTime> creationDateFrom, Nullable<System.DateTime> creationDateTo, Nullable<System.DateTime> effectiveDateFrom, Nullable<System.DateTime> effectiveDateTo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var payerIdParameter = payerId.HasValue ?
                new ObjectParameter("PayerId", payerId) :
                new ObjectParameter("PayerId", typeof(int));
    
            var payerAccountParameter = payerAccount != null ?
                new ObjectParameter("PayerAccount", payerAccount) :
                new ObjectParameter("PayerAccount", typeof(string));
    
            var payerIdentificationParameter = payerIdentification != null ?
                new ObjectParameter("PayerIdentification", payerIdentification) :
                new ObjectParameter("PayerIdentification", typeof(string));
    
            var payeeIdParameter = payeeId.HasValue ?
                new ObjectParameter("PayeeId", payeeId) :
                new ObjectParameter("PayeeId", typeof(int));
    
            var payeeAccountParameter = payeeAccount != null ?
                new ObjectParameter("PayeeAccount", payeeAccount) :
                new ObjectParameter("PayeeAccount", typeof(string));
    
            var payeeIdentificationParameter = payeeIdentification != null ?
                new ObjectParameter("PayeeIdentification", payeeIdentification) :
                new ObjectParameter("PayeeIdentification", typeof(string));
    
            var transactionNumberParameter = transactionNumber != null ?
                new ObjectParameter("TransactionNumber", transactionNumber) :
                new ObjectParameter("TransactionNumber", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var creationDateFromParameter = creationDateFrom.HasValue ?
                new ObjectParameter("CreationDateFrom", creationDateFrom) :
                new ObjectParameter("CreationDateFrom", typeof(System.DateTime));
    
            var creationDateToParameter = creationDateTo.HasValue ?
                new ObjectParameter("CreationDateTo", creationDateTo) :
                new ObjectParameter("CreationDateTo", typeof(System.DateTime));
    
            var effectiveDateFromParameter = effectiveDateFrom.HasValue ?
                new ObjectParameter("EffectiveDateFrom", effectiveDateFrom) :
                new ObjectParameter("EffectiveDateFrom", typeof(System.DateTime));
    
            var effectiveDateToParameter = effectiveDateTo.HasValue ?
                new ObjectParameter("EffectiveDateTo", effectiveDateTo) :
                new ObjectParameter("EffectiveDateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<gettransactions_Result>("gettransactions", idParameter, payerIdParameter, payerAccountParameter, payerIdentificationParameter, payeeIdParameter, payeeAccountParameter, payeeIdentificationParameter, transactionNumberParameter, referenceNumberParameter, creationDateFromParameter, creationDateToParameter, effectiveDateFromParameter, effectiveDateToParameter);
        }
    
        public virtual int InsertOrUpdateAccount(Nullable<int> id, string alias, string number, Nullable<int> ownerId, Nullable<int> accountTypeId, Nullable<System.DateTime> lastUpdate, Nullable<System.DateTime> lastTransation, Nullable<int> accountManagerId, Nullable<int> currencyTypeId, Nullable<int> statusId, Nullable<double> balance, ObjectParameter newId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("AccountTypeId", accountTypeId) :
                new ObjectParameter("AccountTypeId", typeof(int));
    
            var lastUpdateParameter = lastUpdate.HasValue ?
                new ObjectParameter("LastUpdate", lastUpdate) :
                new ObjectParameter("LastUpdate", typeof(System.DateTime));
    
            var lastTransationParameter = lastTransation.HasValue ?
                new ObjectParameter("LastTransation", lastTransation) :
                new ObjectParameter("LastTransation", typeof(System.DateTime));
    
            var accountManagerIdParameter = accountManagerId.HasValue ?
                new ObjectParameter("AccountManagerId", accountManagerId) :
                new ObjectParameter("AccountManagerId", typeof(int));
    
            var currencyTypeIdParameter = currencyTypeId.HasValue ?
                new ObjectParameter("CurrencyTypeId", currencyTypeId) :
                new ObjectParameter("CurrencyTypeId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateAccount", idParameter, aliasParameter, numberParameter, ownerIdParameter, accountTypeIdParameter, lastUpdateParameter, lastTransationParameter, accountManagerIdParameter, currencyTypeIdParameter, statusIdParameter, balanceParameter, newId);
        }
    
        public virtual int InsertOrUpdateCard(Nullable<int> id, Nullable<int> ownerId, string number, Nullable<System.DateTime> cutOffDate, Nullable<System.DateTime> paymentLimitDate, Nullable<int> statusId, Nullable<double> limit, Nullable<int> currencyTypes, Nullable<double> balance, ObjectParameter newId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var cutOffDateParameter = cutOffDate.HasValue ?
                new ObjectParameter("CutOffDate", cutOffDate) :
                new ObjectParameter("CutOffDate", typeof(System.DateTime));
    
            var paymentLimitDateParameter = paymentLimitDate.HasValue ?
                new ObjectParameter("PaymentLimitDate", paymentLimitDate) :
                new ObjectParameter("PaymentLimitDate", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(double));
    
            var currencyTypesParameter = currencyTypes.HasValue ?
                new ObjectParameter("CurrencyTypes", currencyTypes) :
                new ObjectParameter("CurrencyTypes", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateCard", idParameter, ownerIdParameter, numberParameter, cutOffDateParameter, paymentLimitDateParameter, statusIdParameter, limitParameter, currencyTypesParameter, balanceParameter, newId);
        }
    
        public virtual int InsertOrUpdateClient(Nullable<int> id, string name, string lastName, Nullable<int> identificationTypeId, string identification, string telephone, string address, Nullable<int> genderId, Nullable<int> statusId, ObjectParameter newId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var identificationTypeIdParameter = identificationTypeId.HasValue ?
                new ObjectParameter("IdentificationTypeId", identificationTypeId) :
                new ObjectParameter("IdentificationTypeId", typeof(int));
    
            var identificationParameter = identification != null ?
                new ObjectParameter("Identification", identification) :
                new ObjectParameter("Identification", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var genderIdParameter = genderId.HasValue ?
                new ObjectParameter("GenderId", genderId) :
                new ObjectParameter("GenderId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateClient", idParameter, nameParameter, lastNameParameter, identificationTypeIdParameter, identificationParameter, telephoneParameter, addressParameter, genderIdParameter, statusIdParameter, newId);
        }
    
        public virtual int InsertOrUpdateTransaction(Nullable<int> id, Nullable<int> payerId, string payerAccount, string payerIdentification, Nullable<int> payeeId, string payeeAccount, string payeeIdentification, Nullable<int> payeeBankId, Nullable<int> transactionTypeId, Nullable<System.DateTime> creationDate, string number, string concept, Nullable<double> debit, Nullable<double> credit, Nullable<int> currencyTypeId, Nullable<double> balance, string referenceNumber, Nullable<System.DateTime> effectiveDate, Nullable<int> statusId, ObjectParameter newId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var payerIdParameter = payerId.HasValue ?
                new ObjectParameter("PayerId", payerId) :
                new ObjectParameter("PayerId", typeof(int));
    
            var payerAccountParameter = payerAccount != null ?
                new ObjectParameter("PayerAccount", payerAccount) :
                new ObjectParameter("PayerAccount", typeof(string));
    
            var payerIdentificationParameter = payerIdentification != null ?
                new ObjectParameter("PayerIdentification", payerIdentification) :
                new ObjectParameter("PayerIdentification", typeof(string));
    
            var payeeIdParameter = payeeId.HasValue ?
                new ObjectParameter("PayeeId", payeeId) :
                new ObjectParameter("PayeeId", typeof(int));
    
            var payeeAccountParameter = payeeAccount != null ?
                new ObjectParameter("PayeeAccount", payeeAccount) :
                new ObjectParameter("PayeeAccount", typeof(string));
    
            var payeeIdentificationParameter = payeeIdentification != null ?
                new ObjectParameter("PayeeIdentification", payeeIdentification) :
                new ObjectParameter("PayeeIdentification", typeof(string));
    
            var payeeBankIdParameter = payeeBankId.HasValue ?
                new ObjectParameter("PayeeBankId", payeeBankId) :
                new ObjectParameter("PayeeBankId", typeof(int));
    
            var transactionTypeIdParameter = transactionTypeId.HasValue ?
                new ObjectParameter("TransactionTypeId", transactionTypeId) :
                new ObjectParameter("TransactionTypeId", typeof(int));
    
            var creationDateParameter = creationDate.HasValue ?
                new ObjectParameter("CreationDate", creationDate) :
                new ObjectParameter("CreationDate", typeof(System.DateTime));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var conceptParameter = concept != null ?
                new ObjectParameter("Concept", concept) :
                new ObjectParameter("Concept", typeof(string));
    
            var debitParameter = debit.HasValue ?
                new ObjectParameter("Debit", debit) :
                new ObjectParameter("Debit", typeof(double));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var currencyTypeIdParameter = currencyTypeId.HasValue ?
                new ObjectParameter("CurrencyTypeId", currencyTypeId) :
                new ObjectParameter("CurrencyTypeId", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var effectiveDateParameter = effectiveDate.HasValue ?
                new ObjectParameter("EffectiveDate", effectiveDate) :
                new ObjectParameter("EffectiveDate", typeof(System.DateTime));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrUpdateTransaction", idParameter, payerIdParameter, payerAccountParameter, payerIdentificationParameter, payeeIdParameter, payeeAccountParameter, payeeIdentificationParameter, payeeBankIdParameter, transactionTypeIdParameter, creationDateParameter, numberParameter, conceptParameter, debitParameter, creditParameter, currencyTypeIdParameter, balanceParameter, referenceNumberParameter, effectiveDateParameter, statusIdParameter, newId);
        }
    }
}
